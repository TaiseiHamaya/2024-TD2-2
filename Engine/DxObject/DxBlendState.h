#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
// directX
#include <d3d12.h>
#include <dxgi1_6.h>

// c++
#include <cstdint>
#include <cassert>

// ComPtr
#include <ComPtr.h>

//-----------------------------------------------------------------------------------------
// comment
//-----------------------------------------------------------------------------------------
#pragma comment(lib, "d3d12.lib")
#pragma comment(lib, "dxgi.lib")

////////////////////////////////////////////////////////////////////////////////////////////
// BlendMode enum
////////////////////////////////////////////////////////////////////////////////////////////
enum BlendMode {
	kBlendModeNone,     //!< ブレンドなし
	kBlendModeNormal,   //!< 通常αブレンド. デフォルト
	kBlendModeAdd,      //!< 加算
	kBlendModeSubtract, //!< 減算
	kBlendModeMultily,  //!< 乗算
	kBlendModeScreen,   //!< スクリーン

	kCountOfBlendMode,

	// option
	DefaultBlendMode = kBlendModeNormal,
};

////////////////////////////////////////////////////////////////////////////////////////////
// DxObject namespace
////////////////////////////////////////////////////////////////////////////////////////////
namespace DxObject {

	////////////////////////////////////////////////////////////////////////////////////////////
	// BlendState class
	////////////////////////////////////////////////////////////////////////////////////////////
	class BlendState { // BlendStateTable
	public:

		//=========================================================================================
		// public method
		//=========================================================================================

		//! @brief コンストラクタ
		BlendState() { Init(); }

		//! @brief デストラクタ
		~BlendState() { Term(); }

		//! @brief 初期化処理
		void Init();

		//! @brief 終了処理
		void Term();

		//=========================================================================================
		// operator
		//=========================================================================================

		const D3D12_BLEND_DESC& operator[](BlendMode mode) {
			return blendDesc_[mode];
		}

	private:

		//=========================================================================================
		// private methods
		//=========================================================================================

		D3D12_BLEND_DESC blendDesc_[BlendMode::kCountOfBlendMode];

	};

}