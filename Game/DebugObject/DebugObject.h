#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
// collider base
#include <Collider.h>

// c++
#include <memory>

// Attribute
#include <Attribute.h>

////////////////////////////////////////////////////////////////////////////////////////////
// DebugObject base class
////////////////////////////////////////////////////////////////////////////////////////////
class DebugObject
	: public Attribute {
public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	DebugObject()          = default;
	virtual ~DebugObject() = default;

	virtual void Init() = 0;

	virtual void Update() = 0;

	virtual void Draw() = 0;

	bool IsDelete() const { return isDelete_; }

protected:

	//=========================================================================================
	// protected variables
	//=========================================================================================

	//* member *//

	bool isDelete_ = false;

	//* IA

	

};

////////////////////////////////////////////////////////////////////////////////////////////
// DebugObjects namespace
////////////////////////////////////////////////////////////////////////////////////////////
namespace DebugObjects {

	////////////////////////////////////////////////////////////////////////////////////////////
	// Sphere(collider: sphere) class
	////////////////////////////////////////////////////////////////////////////////////////////
	class Sphere
		: public DebugObject
		, public Collider {
	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		Sphere() = default;
		~Sphere() { Term(); }

		void Init() override;

		void Term();

		void Update() override;

		void Draw() override;

	private:

		//=========================================================================================
		// private variables
		//=========================================================================================



	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Box(collider: AABB) class
	////////////////////////////////////////////////////////////////////////////////////////////
	class Box
		: public DebugObject
		, public Collider {
	public:

	private:


	};


}

